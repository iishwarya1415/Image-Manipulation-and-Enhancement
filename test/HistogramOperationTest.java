import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.util.Arrays;

import model.ImageModel;
import model.ImageModelImpl;
import operations.AbstractImageOperation;
import operations.HistogramOperation;

import static org.junit.Assert.assertArrayEquals;


/**
 * This file tests the Histogram operation.
 */
public class HistogramOperationTest {

  private ImageModel model;

  @Before
  public void setUp() {
    model = new ImageModelImpl();  // Initialize the image model before each test
  }

  @Test
  public void testHistogramOnSmallImage() throws IOException {
    int[][][] imageData = {
        {{255, 0, 0}, {0, 255, 0}},  // Red, Green
        {{0, 0, 255}, {255, 255, 0}},  // Blue, Yellow
        {{0, 0, 0}, {0, 0, 0}}, // Black pixels
    };

    String imageName = "small.png";
    model.saveImage(imageName, imageData);

    AbstractImageOperation operation = new HistogramOperation(imageName, "HistogramImage");
    operation.performOperation(model);

    int[][][] expectedHistogram = {{{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}},
        {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}},
        {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}},
        {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}},
        {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}},
        {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}},
        {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}},
        {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}},
        {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}},
        {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}},
        {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}},
        {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}},
        {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}}, {{0, 255, 0}, {0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}},
        {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255},
        {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255},
        {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255},
        {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255},
        {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255},
        {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255},
        {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255},
        {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255},
        {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255},
        {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255},
        {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255},
        {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255},
        {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0}}, {{0, 0, 255},
        {0, 255, 0}}, {{0, 255, 0}, {0, 0, 255}, {0, 255, 0}}, {{0, 255, 0}, {0, 0, 255},
        {0, 255, 0}}, {{0, 255, 0}, {0, 0, 255}, {0, 255, 0}}, {{0, 255, 0}, {0, 0, 255},
        {0, 255, 0}}, {{0, 255, 0}, {0, 0, 255}, {0, 255, 0}}, {{0, 255, 0}, {0, 0, 255},
        {0, 255, 0}}, {{0, 255, 0}, {0, 0, 255}, {0, 255, 0}}, {{0, 255, 0}, {0, 0, 255},
        {0, 255, 0}}, {{0, 255, 0}, {0, 0, 255}, {0, 255, 0}}, {{0, 255, 0}, {0, 0, 255},
        {0, 255, 0}}, {{0, 255, 0}, {0, 0, 255}, {0, 255, 0}}, {{0, 255, 0}, {0, 0, 255},
        {0, 255, 0}}, {{0, 255, 0}, {0, 0, 255}, {0, 255, 0}}, {{0, 0, 255}, {0, 255, 0},
        {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0},
        {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0},
        {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0},
        {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0},
        {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0},
        {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0},
        {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255},
        {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255},
        {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255},
        {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255},
        {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}},
        {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}},
        {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}},
        {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}},
        {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}},
        {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}},
        {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}}, {{0, 0, 255}, {0, 255, 0}, {0, 0, 255}},
        {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}},
        {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}},
        {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}},
        {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}}, {{0, 0, 255}, {0, 0, 255}}};


    int[][][] histogramImage = model.getImage("HistogramImage");
    int[][][] newArray = removeZeroArrays(histogramImage);

    assertArrayEquals(expectedHistogram, newArray);
  }

  private static int[][][] removeZeroArrays(int[][][] array) {
    return Arrays.stream(array)  // Convert 3D array to Stream
        .map(slice -> Arrays.stream(slice)  // Convert 2D array to Stream
            .filter(row -> !Arrays.equals(row, new int[]{0, 0, 0}))
            .toArray(int[][]::new))  // Convert back to 2D array
        .filter(slice -> slice.length > 0)  // Filter out empty slices
        .toArray(int[][][]::new);  // Convert back to 3D array
  }

  @Test(expected = IllegalArgumentException.class)
  public void testHistogramOnNonExistentImage() {
    // Try to flip a non-existent image, should throw an exception
    AbstractImageOperation operation = new HistogramOperation("nonExistentImage",
        "HistogramImage");
    operation.performOperation(model);
  }

}